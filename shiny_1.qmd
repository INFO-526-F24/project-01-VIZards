---
title: "Question 1 Visualization"
author:
  - name: "VIZards"
    affiliations:
      - name: "College of Information, University of Arizona"
description: "Tucson Police Reported Crime Data Analysis"
format: dashboard
runtime: shiny
execute:
  warning: false
  echo: false
---


```{r include=FALSE}
# Install and load necessary packages
if(!require(pacman))
  install.packages("pacman")

pacman::p_load(tidyverse,
               dplyr,
               tigris,
               sf,
               ggplot2,
               scales,
               shiny,
               tmap,
               colorspace)

# Set options for better figure display
options(width = 65)
knitr::opts_chunk$set(
  fig.width = 7,
  fig.asp = 0.618,
  fig.retina = 3,
  fig.align = "center",
  dpi = 300
)
```

```{r}
# Load data
crime_data <- read.csv("./data/Tucson_Police_Reported_Crimes.csv")
tucson_wards <- st_read("Wards_-_City_of_Tucson.geojson") %>%
  mutate(Ward = as.character(WARD))

# Process crime type data for consistency
crime_data <- crime_data %>%
  mutate(
    UCRDescription = str_replace(UCRDescription, "^[0-9]+ - ", ""),  # Remove prefixes like "01 -"
    UCRDescription = str_to_title(UCRDescription),  # Convert to title case
    Year = as.numeric(Year)  # Ensure year is numeric for filtering
  )

```


```{r}
ui <- fillPage(
  tags$head(
    tags$style(HTML("
      html, body {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
      }
      .sidebar {
        height: 100%;
      }
      .main-panel {
        height: 100%;
        width: 100%;
      }
      .tab-content {
        height: calc(100vh - 100px); /* Adjust for titlePanel */
      }
    "))
  ),
  titlePanel("Tucson Crime Analysis"),
  sidebarLayout(
    sidebarPanel(
      width = 3,
      selectInput(
        inputId = "year_filter",
        label = "Select Year:",
        choices = c("All", sort(unique(crime_data$Year))),
        selected = "All"
      ),
      selectInput(
        inputId = "crime_type_filter",
        label = "Select Crime Type:",
        choices = c("All", sort(unique(crime_data$UCRDescription))),
        selected = "All"
      )
    ),
    mainPanel(
      width = 9,
      tabsetPanel(
        tabPanel("Crime Map", tmapOutput("crime_map", height = "600px", width = "100%")),
        tabPanel("Crime Type Distribution", plotOutput("bar_chart", height = "600px", width = "100%"))
      )
    )
  )
)
```


```{r}
server <- function(input, output, session) {

  filtered_data <- reactive({
    data <- crime_data
    if (input$year_filter != "All") {
      data <- data %>% filter(Year == input$year_filter)
    }
    if (input$crime_type_filter != "All") {
      data <- data %>% filter(UCRDescription == input$crime_type_filter)
    }
    data %>%
      group_by(Ward) %>%
      summarise(CrimeCount = n(), .groups = "drop") %>%
      mutate(Ward = as.character(Ward))
  })

  merged_data <- reactive({
    tucson_wards %>%
      left_join(filtered_data(), by = "Ward") %>%
      mutate(CrimeCount = as.numeric(CrimeCount))
  })

  crime_colors <- c(
    "Homicide" = "#d78f7e",
    "Sexual Assault" = "#111210",
    "Robbery" = "#dce0c5",
    "Assault, Aggravated" = "#80607f",
    "Burglary" = "#ffa07a",
    "Larceny" = "#91c4b3",
    "GTA" = "#8b4513",
    "Other" = "gray"
  )

  # Render tmap output
  output$crime_map <- renderTmap({
    tmap_mode("view")
    tm_shape(merged_data()) +
      tm_fill(
        "CrimeCount",
        palette = "Reds",
        title = "Crime Count",
        popup.vars = c("Crime Count :  " = "CrimeCount"),
        border.col = "black", border.alpha = .5,
        id = "Label"
      ) +
      tm_borders() +
      tm_layout(title = "Tucson Crime Analysis") +
      tm_text("Label") +
      tm_legend(position = c("left", "bottom")) +
      tm_layout(frame = FALSE)
  })

  processed_data <- reactive({
    data <- crime_data
    if (input$year_filter != "All") {
      data <- data %>% filter(Year == input$year_filter)
    }
    data %>%
      filter(Division != "" & !is.na(Division)) %>%
      mutate(UCRDescription = ifelse(UCRDescription %in% names(crime_colors), UCRDescription, "Other")) %>%
      group_by(Division, UCRDescription) %>%
      summarise(CrimeCount = n(), .groups = "drop") %>%
      group_by(Division) %>%
      mutate(
        Percentage = CrimeCount / sum(CrimeCount) * 100,
        Division = factor(Division, levels = c("Midtown", "South", "West", "East"))
      ) %>%
      arrange(desc(CrimeCount))
  })


  output$bar_chart <- renderPlot({
  data <- processed_data() %>%
    filter(Division != "NA") %>%
    group_by(Division) %>%
    arrange(desc(CrimeCount)) %>%
    mutate(UCRDescription = fct_reorder(UCRDescription, CrimeCount, .desc = TRUE)) %>%
    ungroup()

  # Define bar colors dynamically
  bar_colors <- setNames(
    if (input$crime_type_filter == "All") {
      crime_colors  # Keep original colors for all crime types
    } else {
      ifelse(
        names(crime_colors) == input$crime_type_filter,
        crime_colors,  # Keep the original color for the selected crime type
        scales::alpha(crime_colors, 0.3)  # Reduce intensity for other crime types
      )
    },
    names(crime_colors)  # Ensure names remain for matching
  )

  # Create the bar chart
ggplot(data, aes(x = Division, y = CrimeCount, fill = UCRDescription)) +
  geom_bar(
    stat = "identity",
    position = position_dodge(width = 0.9),
    color = "black"
  ) +
  geom_text(
    aes(
      label = scales::comma(CrimeCount),
      group = UCRDescription
    ),
    position = position_dodge(width = 0.9),
    vjust = -0.5,
    size = 3,
    color = "black"
  ) +
  scale_y_log10(labels = scales::comma) +  # Add comma-based numbers to y-axis
  scale_fill_manual(values = bar_colors) +  # Apply dynamic bar colors
  labs(
    title = paste(
      "Distribution of", if (input$crime_type_filter == "All") "All" else input$crime_type_filter,
      "Crimes across Tucson Divisions"
    ),
    x = "Division",
    y = "Crime Count (Log Scale)",
    fill = NULL
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 12, hjust = 1),
    axis.text.y = element_text(size = 12),
    legend.position = "bottom",
    legend.direction = "horizontal",
    legend.spacing.x = unit(1, "cm"),
    legend.title = element_blank(),
    legend.text = element_text(family = "sans", size = 12),
    legend.key.width = unit(1.5, "cm"),
    legend.key.height = unit(0.5, "cm"),
    plot.title = element_text(
      hjust = 0.5,
      vjust = 2,
      size = 15
    ),
    plot.margin = unit(c(1.2, 1.2, 1.2, 1.2), "cm"),
    panel.border = element_rect(color = "grey80", fill = NA)  # Add border around plot
  ) +
  guides(fill = guide_legend(label.position = "top", nrow = 1))
  })
}

shinyApp(ui = ui, server = server)
```