---
title: "Question 2 Visualization"
editor: visual
author: 
  - name: "VIZards"
    affiliations:
      - name: "College of Information, University of Arizona"
description: "Tucson Police Reported Crime Data Analysis"
format: dashboard
runtime: shiny
execute:
  warning: false
  echo: false
---


```{r}
# Load libraries
if (!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, shiny, scales, ggplot2)

```

```{r}
# Load data
crime_data <- read.csv("./data/Tucson_Police_Reported_Crimes.csv")

crime_data <- crime_data %>%
  mutate(
    ProcessedCrimeType = str_replace(UCRDescription, "^[0-9]+ - ", "") %>% str_to_title(),
    Year = as.numeric(Year),
    Hour = as.numeric(substr(TimeOccur, 1, 2)),
    TimeOfDay = case_when(
      Hour >= 0 & Hour < 4  ~ "Night",
      Hour >= 4 & Hour < 6  ~ "Dawn",
      Hour >= 6 & Hour < 12 ~ "Morning",
      Hour >= 12 & Hour < 16 ~ "Afternoon",
      Hour >= 16 & Hour < 19 ~ "Evening",
      Hour >= 19 & Hour <= 23 ~ "Dusk",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(ProcessedCrimeType) & !is.na(Hour) & !is.na(TimeOfDay))

unique_crime_types <- c("All", sort(unique(crime_data$ProcessedCrimeType)))

time_of_day_colors <- c(
  "Night" = "#1c2833",
  "Dawn" = "#5dade2",
  "Morning" = "#f1c40f",
  "Afternoon" = "#e74c3c",
  "Evening" = "#f39c12",
  "Dusk" = "#34495e"
)

crime_colors <- c(
  "Homicide" = "#d78f7e",
  "Sexual Assault" = "#111210",
  "Robbery" = "#dce0c5",
  "Assault, Aggravated" = "#80607f",
  "Burglary" = "#ffa07a",
  "Larceny" = "#91c4b3",
  "GTA" = "#8b4513",
  "Other" = "gray"
)

crime_data
```

```{r}
ui <- fluidPage(
  titlePanel("Crime Trends in Tucson (2018-2024)"),
  sidebarLayout(
    sidebarPanel(
      selectInput(
        inputId = "crime_type",
        label = "Select Crime Type:",
        choices = unique_crime_types,  # Use clean names for the filter
        selected = "All"
      )
    ),
    mainPanel(
      tabsetPanel(
        tabPanel(
          "Line Chart",
          plotOutput("line_chart", height = "600px", width = "100%")
        ),
        tabPanel(
          "Bar Chart",
          plotOutput("bar_chart", height = "600px", width = "100%")
        )
      )
    )
  )
)
```

```{r}
server <- function(input, output, session) {

  filtered_hourly_data <- reactive({
    if (input$crime_type == "All") {
      crime_data %>%
        group_by(Hour, TimeOfDay) %>%
        summarise(CrimeCount = n(), .groups = "drop")
    } else {
      crime_data %>%
        filter(ProcessedCrimeType == input$crime_type) %>%
        group_by(Hour, TimeOfDay) %>%
        summarise(CrimeCount = n(), .groups = "drop")
    }
  })

  filtered_line_data <- reactive({
    if (input$crime_type == "All") {
      crime_data %>%
        group_by(ProcessedCrimeType, Year) %>%
        summarise(CrimeCount = n(), .groups = "drop")
    } else {
      crime_data %>%
        filter(ProcessedCrimeType == input$crime_type) %>%
        group_by(Year) %>%
        summarise(CrimeCount = n(), .groups = "drop")
    }
  })

  # Render the line chart
  output$line_chart <- renderPlot({
    data <- filtered_line_data()  # Call the reactive data

    # Validate that data is non-empty
    req(nrow(data) > 0)

    ggplot(data, aes(x = Year, y = CrimeCount)) +
      geom_line(
        aes(
          group = if (input$crime_type == "All") ProcessedCrimeType else NULL,
          color = if (input$crime_type == "All") ProcessedCrimeType else "Selected"
        ),
        size = if (input$crime_type == "All") 0.8 else 1.5
      ) +
      geom_point(
        aes(
          group = if (input$crime_type == "All") ProcessedCrimeType else NULL,
          color = if (input$crime_type == "All") ProcessedCrimeType else "Selected",
          fill = if (input$crime_type == "All") ProcessedCrimeType else "Selected"
        ),
        fill = "white",
        size = 3,
        shape = 21
      ) +
      scale_color_manual(
        values = if (input$crime_type == "All") crime_colors else c("Selected" = "red"),
        guide = if (input$crime_type == "All") "legend" else "none"
      ) +
      scale_y_continuous(labels = scales::comma) +
      labs(
        title = if (input$crime_type == "All") "Crime Trends in Tucson (2018-2024)" else paste(input$crime_type, "Trend"),
        x = "Year",
        y = "Number of Incidents",
        color = if (input$crime_type == "All") "Crime Type" else NULL
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
        axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        legend.position = if (input$crime_type == "All") "bottom" else "none",
        panel.border = element_rect(fill = NA, color = "black", size = 1)
      )
  })


  # Render bar chart
  output$bar_chart <- renderPlot({
    data <- filtered_hourly_data()

    ggplot(data, aes(x = Hour, y = CrimeCount, fill = TimeOfDay)) +
      geom_bar(stat = "identity", color = "black") +
      scale_x_continuous(breaks = 0:23, labels = sprintf("%02d", 0:23)) +  # Format X-axis as 2 digits
      scale_y_continuous(labels = scales::comma) +
      scale_fill_manual(
        values = time_of_day_colors,
        breaks = c("Night", "Dawn", "Morning", "Afternoon", "Evening", "Dusk"),  # Format legend order
        labels = c("Night", "Dawn", "Morning", "Afternoon", "Evening", "Dusk")  # Label them explicitly
      ) +
      labs(
        title = paste("Crime Incidents by Hour of the Day for", input$crime_type),
        x = "Hour of the Day",
        y = "Number of Incidents",
        fill = "Time of Day"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
        axis.text.x = element_text(size = 10, angle = 0, hjust = 0.5),
        axis.text.y = element_text(size = 12),
        legend.position = "bottom",  # Move legend to the bottom
        legend.direction = "horizontal",  # Arrange legend horizontally
        legend.spacing.x = unit(1, "cm"),  # Add spacing between legend items
        panel.grid.major = element_blank(),  # Remove major grid lines
        panel.grid.minor = element_blank(),  # Remove minor grid lines
        panel.border = element_rect(fill = NA, color = "black", size = 1),
        legend.text = element_text(family = "sans", size = 12),
        legend.key.width = unit(1.5, "cm"),
        legend.key.height = unit(0.5, "cm"),
        legend.title = element_blank()
      ) +
      guides(fill = guide_legend(label.position = "top", nrow = 1))
  })
}

shinyApp(ui = ui, server = server)
```